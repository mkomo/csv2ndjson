#!/usr/bin/env python3

#from __future__ import print_function
import csv
import sys
import json
import getopt

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

USAGE='''Usage: ndjson2csv [OPTION]... [FILE]...
Translate FILE(s) from ndjson to csv and output to standard output.

With no FILE, or when FILE is -, read standard input.

  -h              show this message
  -t              fields in output will be tab separated
  -d DELIM        fields in output will be separated by DELIM
  -c [FIELD],...  include only these fields (in the given order)'''

(optlist, args) = getopt.getopt(sys.argv[1:], 'htc:d:', ["help", "columns=", "delimiter="])

delim = ','
columns_to_output = []

for o, a in optlist:
    if o in ('-d', '--delimiter'):
        delim = a
    elif o == '-t':
        delim = '\t'
    elif o in ('-c', '--columns'):
        columns_to_output = a.split(',')
    elif o in ('-h', '--help'):
        eprint(USAGE)
        sys.exit(0)

files = [sys.stdin] if (len(args) == 0 or (len(args) == 1 and args[0] == '-')) else args

# If you're processing sys.stdin you can only iterate once, so you have to aggregate data in memory.
# TODO implement another method which, if not sys.stdin, makes two passes and doesn't store data in memory

columns = set()
data = list()

try:
    output = csv.writer(sys.stdout, delimiter=delim)
    if len(columns_to_output) > 0:
        output.writerow(columns_to_output)

    for f in files:
        with (open(f, newline = '', encoding="utf-8-sig") if f != sys.stdin else f) as infile:
            for row in infile:
                rowData = json.loads(row)
                if len(columns_to_output) > 0:
                    output.writerow([(rowData[col] if col in rowData else '') for col in columns_to_output])
                else:
                    data.append(rowData)
                    columns.update(rowData.keys())

    if len(columns_to_output) > 0:
        sys.exit(0)

    columns_to_output = list(columns)
    columns_to_output.sort()

    output.writerow(columns_to_output)
    for rowData in data:
        output.writerow([(rowData[col] if col in rowData else '') for col in columns_to_output])
except BrokenPipeError:
  sys.exit(32)